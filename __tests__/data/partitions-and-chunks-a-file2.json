[
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Header",
    "text": "Pro Teams Pricing Documentation"
  },
  {
    "type": "Title",
    "text": "nom"
  },
  {
    "type": "Image",
    "text": "a."
  },
  {
    "type": "NarrativeText",
    "text": "Search packages"
  },
  {
    "type": "Title",
    "text": "Search"
  },
  {
    "type": "Title",
    "text": "node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "1.9.1 • Public • Published 14 days ago"
  },
  {
    "type": "NarrativeText",
    "text": "Readme"
  },
  {
    "type": "NarrativeText",
    "text": "Code Beta"
  },
  {
    "type": "NarrativeText",
    "text": "1 Dependency"
  },
  {
    "type": "NarrativeText",
    "text": "7 Dependents"
  },
  {
    "type": "NarrativeText",
    "text": "33 Versions"
  },
  {
    "type": "Image",
    "text": "NODE-CALLS-PYTHON"
  },
  {
    "type": "Title",
    "text": "node-calls-python - call Python from Node.js directly in-process without spawning processes"
  },
  {
    "type": "Title",
    "text": "Suitable for running your ML or deep learning models"
  },
  {
    "type": "Title",
    "text": "from Node directly"
  },
  {
    "type": "NarrativeText",
    "text": "Donate PayPal Donate Node.js CI passing v1.9.1 Node.js CI"
  },
  {
    "type": "Title",
    "text": "PayPal"
  },
  {
    "type": "NarrativeText",
    "text": "passing npmnpm v1.9.1"
  },
  {
    "type": "Title",
    "text": "Motivation"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "1/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "NarrativeText",
    "text": "Current solutions spawn a new process whenever you want to run Python code in Node.js and communicate via IPC using sockets, stdin/stdout, etc. But creating new processes every time you want to run Python code could be a major overhead and can lead to significant performance penalties. If the execution time of your Python code is less than creating a new process, you will see significant performance problems because your Node.js code will keep creating new processes instead of executing your Python code. Suppose you have a few NumPy calls in Python: do you want to create a new process for that? I guess your answer is no. In this case, running the Python code in-process is a much better solution because using the embedded Python interpreter is much faster than creating new processes and does not require any IPC to pass the data around. The data can stay in memory and requires only some conversions between Python and Node types"
  },
  {
    "type": "NarrativeText",
    "text": "(using the N-API and Python C API)."
  },
  {
    "type": "Title",
    "text": "Installation"
  },
  {
    "type": "NarrativeText",
    "text": "npm install node-calls-python"
  },
  {
    "type": "Title",
    "text": "Installation FAQ"
  },
  {
    "type": "NarrativeText",
    "text": "Sometimes you have to install prerequisites to make it work."
  },
  {
    "type": "Title",
    "text": "Linux: install node, npm, node-gyp, python3, python3-dev, g++ and make Install Node"
  },
  {
    "type": "NarrativeText",
    "text": "sudo apt install curl"
  },
  {
    "type": "NarrativeText",
    "text": "curl -sL https://deb.nodesource.com/setup_13.x | sudo -E bash - sudo apt install nodejs"
  },
  {
    "type": "Title",
    "text": "Install Python"
  },
  {
    "type": "NarrativeText",
    "text": "sudo apt install python3"
  },
  {
    "type": "NarrativeText",
    "text": "sudo apt install python3-dev"
  },
  {
    "type": "Title",
    "text": "Install Node-gyp"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "2/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "NarrativeText",
    "text": "sudo apt install make sudo apt install g++ sudo npm install -g node-gyp"
  },
  {
    "type": "Title",
    "text": "Windows: install NodeJS and Python"
  },
  {
    "type": "NarrativeText",
    "text": "Install Node-gyp if missing"
  },
  {
    "type": "NarrativeText",
    "text": "npm install --global --production windows-build-tools npm install -g node-gyp"
  },
  {
    "type": "Title",
    "text": "Mac: install XCode from AppStore, Node.js and Python"
  },
  {
    "type": "NarrativeText",
    "text": "npm install node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "If you see installation problems on Mac with ARM (E.g. using M1 Pro), try to specify 'arch' and/or 'target_arch' parameters for npm"
  },
  {
    "type": "NarrativeText",
    "text": "npm install --arch=arm64 --target_arch=arm64 node-calls-python"
  },
  {
    "type": "Title",
    "text": "Examples"
  },
  {
    "type": "Title",
    "text": "Calling a simple python function"
  },
  {
    "type": "NarrativeText",
    "text": "Let's say you have the following python code in test.py"
  },
  {
    "type": "NarrativeText",
    "text": "import numpy as np"
  },
  {
    "type": "NarrativeText",
    "text": "def multiple(a, b):"
  },
  {
    "type": "NarrativeText",
    "text": "return np.multiply(a, b).tolist()"
  },
  {
    "type": "NarrativeText",
    "text": "Then to call this function directly you can do this in Node"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "Header",
    "text": "3/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"path/to/test.py\").then(async function(pymodule) { const result = await py.call(pymodule, \"multiple\", [1, 2, console.log(result);"
  },
  {
    "type": "UncategorizedText",
    "text": "});"
  },
  {
    "type": "NarrativeText",
    "text": "Or to call this function by using the synchronous version"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"path/to/test.py\").then(async function(pymodule) { const result = py.callSync(pymodule, \"multiple\", [1, 2, 3, console.log(result);"
  },
  {
    "type": "UncategorizedText",
    "text": "});"
  },
  {
    "type": "Title",
    "text": "Creating python objects"
  },
  {
    "type": "NarrativeText",
    "text": "Let's say you have the following python code in test.py"
  },
  {
    "type": "NarrativeText",
    "text": "import numpy as np"
  },
  {
    "type": "Title",
    "text": "class Calculator:"
  },
  {
    "type": "Title",
    "text": "vector = []"
  },
  {
    "type": "Title",
    "text": "def __init__(self, vector):"
  },
  {
    "type": "Title",
    "text": "self.vector = vector"
  },
  {
    "type": "NarrativeText",
    "text": "def multiply(self, scalar, vector):"
  },
  {
    "type": "Title",
    "text": "return np.add(np.multiply(scalar, self.vector), vector"
  },
  {
    "type": "NarrativeText",
    "text": "Then to instance the class directly in Node"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "4/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"path/to/test.py\").then(async function(pymodule) { const pyobj = await py.create(pymodule, \"Calculator\", [1.4 const result = await py.call(pyobj, \"multiply\", 2, [10.4,"
  },
  {
    "type": "UncategorizedText",
    "text": "});"
  },
  {
    "type": "NarrativeText",
    "text": "Or to instance the class synchronously and directly in Node"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"path/to/test.py\").then(async function(pymodule) { const pyobj = py.createSync(pymodule, \"Calculator\", [1.4, const result = await py.callSync(pyobj, \"multiply\", 2, [10 });"
  },
  {
    "type": "Title",
    "text": "Running python code"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "Title",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"path/to/test.py\").then(async function(pymodule) { await py.exec(pymodule, \"run_my_code(1, 2, 3)\"); // exec w const result = await py.eval(pymodule, \"run_my_code(1, 2, console.log(result);"
  },
  {
    "type": "UncategorizedText",
    "text": "});"
  },
  {
    "type": "NarrativeText",
    "text": "Running python code synchronously"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "NarrativeText",
    "text": "const pymodule = py.importSync(\"path/to/test.py\");"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "5/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "NarrativeText",
    "text": "await py.execSync(pymodule, \"run_my_code(1, 2, 3)\"); // exec w const result = py.evalSync(pymodule, \"run_my_code(1, 2, 3)\"); console.log(result);"
  },
  {
    "type": "Title",
    "text": "Reimporting a python module"
  },
  {
    "type": "NarrativeText",
    "text": "You have to set allowReimport paramter to true when calling import/importSync."
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "NarrativeText",
    "text": "let pymodule = py.importSync(\"path/to/test.py\"); pymodule = py.importSync(\"path/to/test.py\", true);"
  },
  {
    "type": "Title",
    "text": "Development Mode"
  },
  {
    "type": "NarrativeText",
    "text": "During development you may want to update your python code running inside Node without restarting your Node process. To achieve this you can reimport your python modules. All your python modules will be reimported where the filename of your python module matches the string parameter: path/to/your/python/code ."
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "NarrativeText",
    "text": "py.reimport('path/to/your/python/code');"
  },
  {
    "type": "NarrativeText",
    "text": "Another option is to run node-calls-python in development mode. In this case once you have updated your python code under path/to/your/python/code the runtime will automatically reimport the changed modules."
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "NarrativeText",
    "text": "py.developmentMode('path/to/your/python/code');"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "6/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Title",
    "text": "Passing kwargs"
  },
  {
    "type": "NarrativeText",
    "text": "Javascript has no similar concept to kwargs of Python. Therefore a little hack is needed here. If you pass an object with __kwargs property set to true as a parameter to call/callSync/create/createSync the object will be mapped to kwargs."
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "NarrativeText",
    "text": "let pymodule = py.importSync(\"path/to/test.py\"); py.callSync(pymodule, \"your_function\", arg1, arg2, {\"name1\": v"
  },
  {
    "type": "NarrativeText",
    "text": "def your_function(arg1, arg2, **kwargs): print(kwargs)"
  },
  {
    "type": "Title",
    "text": "Doing some ML with Python and Node"
  },
  {
    "type": "NarrativeText",
    "text": "Let's say you have the following python code in logreg.py"
  },
  {
    "type": "NarrativeText",
    "text": "from sklearn.datasets import load_iris, load_digits from sklearn.linear_model import LogisticRegression"
  },
  {
    "type": "NarrativeText",
    "text": "class LogReg:"
  },
  {
    "type": "Title",
    "text": "logreg = None"
  },
  {
    "type": "NarrativeText",
    "text": "def __init__(self, dataset):"
  },
  {
    "type": "NarrativeText",
    "text": "if (dataset == \"iris\"):"
  },
  {
    "type": "NarrativeText",
    "text": "X, y = load_iris(return_X_y=True) else:"
  },
  {
    "type": "Title",
    "text": "X, y = load_digits(return_X_y=True)"
  },
  {
    "type": "NarrativeText",
    "text": "self.logreg = LogisticRegression(random_state=42, solv self.logreg.fit(X, y)"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "7/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Title",
    "text": "def predict(self, X):"
  },
  {
    "type": "NarrativeText",
    "text": "return self.logreg.predict_proba(X).tolist()"
  },
  {
    "type": "NarrativeText",
    "text": "Then you can do this in Node"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "ListItem",
    "text": "py.import(\"logreg.py\")).then(async function(pymodule) { // imp const logreg = await py.create(pymodule, \"LogReg\", \"iris\")"
  },
  {
    "type": "NarrativeText",
    "text": "const predict = await py.call(logreg, \"predict\", [[1.4, 5. console.log(predict);"
  },
  {
    "type": "UncategorizedText",
    "text": "});"
  },
  {
    "type": "Title",
    "text": "Using as ES Module"
  },
  {
    "type": "NarrativeText",
    "text": "You can import node-calls-python as an ES module."
  },
  {
    "type": "NarrativeText",
    "text": "import { interpreter as py } from 'node-calls-python';"
  },
  {
    "type": "NarrativeText",
    "text": "let pymodule = py.importSync(pyfile);"
  },
  {
    "type": "Title",
    "text": "Using in Next.js"
  },
  {
    "type": "NarrativeText",
    "text": "If you see the following error when importing in Next.js Module not found: Can't resolve './build/Release/nodecallspython'"
  },
  {
    "type": "NarrativeText",
    "text": "You have add the following code to your next.config.mjs because currently Next.js cannot bundle native node addons properly. For more details please see"
  },
  {
    "type": "NarrativeText",
    "text": "serverComponentsExternalPackages in Next.js"
  },
  {
    "type": "Title",
    "text": "/** @type {import('next').NextConfig} */"
  },
  {
    "type": "NarrativeText",
    "text": "const nextConfig = {"
  },
  {
    "type": "NarrativeText",
    "text": "experimental: {"
  },
  {
    "type": "NarrativeText",
    "text": "serverComponentsExternalPackages: ["
  },
  {
    "type": "Title",
    "text": "'node-calls-python'"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "8/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "UncategorizedText",
    "text": "]"
  },
  {
    "type": "UncategorizedText",
    "text": "}"
  },
  {
    "type": "UncategorizedText",
    "text": "};"
  },
  {
    "type": "NarrativeText",
    "text": "export default nextConfig;"
  },
  {
    "type": "Title",
    "text": "Using Python venv"
  },
  {
    "type": "NarrativeText",
    "text": "You have to add the proper import path so that python could use your installed packages from your venv."
  },
  {
    "type": "NarrativeText",
    "text": "If you have created a venv by python -m venv your-venv your installed python packages can be found under your-venv/Lib/site-packages . So you have to use addImportPath before importing any module to pick up the python packages from your venv."
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter;"
  },
  {
    "type": "Title",
    "text": "py.addImportPath(your-venv/Lib/site-packages)"
  },
  {
    "type": "Title",
    "text": "Working Around Linking Errors on Linux"
  },
  {
    "type": "NarrativeText",
    "text": "If you get an error like this while trying to call Python code ImportError: /usr/local/lib/python3.7/dist-packages/cpython-37m-arm-linux- gnueabihf.so: undefined symbol: PyExc_RuntimeError"
  },
  {
    "type": "NarrativeText",
    "text": "You can fix it by passing the name of your libpython shared library to fixlink"
  },
  {
    "type": "NarrativeText",
    "text": "const nodecallspython = require(\"node-calls-python\");"
  },
  {
    "type": "NarrativeText",
    "text": "const py = nodecallspython.interpreter; py.fixlink('libpython3.7m.so');"
  },
  {
    "type": "NarrativeText",
    "text": "See more examples here"
  },
  {
    "type": "Title",
    "text": "Supported data mapping"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "9/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Title",
    "text": "From Node to Python"
  },
  {
    "type": "ListItem",
    "text": "- undefined to None"
  },
  {
    "type": "ListItem",
    "text": "- null to None"
  },
  {
    "type": "ListItem",
    "text": "- boolean to boolean"
  },
  {
    "type": "ListItem",
    "text": "- number to double or long (as appropriate)"
  },
  {
    "type": "ListItem",
    "text": "int32 to long"
  },
  {
    "type": "ListItem",
    "text": "- uint32 to long"
  },
  {
    "type": "ListItem",
    "text": "- int64 to long"
  },
  {
    "type": "ListItem",
    "text": "- string to unicode (string)"
  },
  {
    "type": "ListItem",
    "text": "array to list"
  },
  {
    "type": "ListItem",
    "text": "- object to dictionary"
  },
  {
    "type": "Title",
    "text": "From Python to Node"
  },
  {
    "type": "ListItem",
    "text": "- None to undefined"
  },
  {
    "type": "ListItem",
    "text": "- boolean to boolean"
  },
  {
    "type": "ListItem",
    "text": "- double to number"
  },
  {
    "type": "ListItem",
    "text": "- long to int64"
  },
  {
    "type": "ListItem",
    "text": "- unicode (string) to string"
  },
  {
    "type": "ListItem",
    "text": "list to array"
  },
  {
    "type": "ListItem",
    "text": "tuple to array"
  },
  {
    "type": "ListItem",
    "text": "set to array"
  },
  {
    "type": "ListItem",
    "text": "- dictionary to object"
  },
  {
    "type": "ListItem",
    "text": "- numpy.array to array (this has limited support, will convert every"
  },
  {
    "type": "Title",
    "text": "Keywords"
  },
  {
    "type": "NarrativeText",
    "text": "python c++ v8 node nodejs node-js napi"
  },
  {
    "type": "NarrativeText",
    "text": "Install"
  },
  {
    "type": "NarrativeText",
    "text": "npm i node-calls-python"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "Title",
    "text": "i)"
  },
  {
    "type": "NarrativeText",
    "text": "10/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Header",
    "text": "Repository github.com/hmenyus/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "Homepage"
  },
  {
    "type": "NarrativeText",
    "text": "github.com/hmenyus/node-calls-python#readme"
  },
  {
    "type": "UncategorizedText",
    "text": "+"
  },
  {
    "type": "Title",
    "text": "Weekly Downloads"
  },
  {
    "type": "UncategorizedText",
    "text": "2,916"
  },
  {
    "type": "Title",
    "text": "Version"
  },
  {
    "type": "Title",
    "text": "License"
  },
  {
    "type": "UncategorizedText",
    "text": "1.9.1"
  },
  {
    "type": "Title",
    "text": "MIT"
  },
  {
    "type": "Title",
    "text": "Unpacked Size"
  },
  {
    "type": "Title",
    "text": "Total Files"
  },
  {
    "type": "UncategorizedText",
    "text": "93.8 kB"
  },
  {
    "type": "UncategorizedText",
    "text": "25"
  },
  {
    "type": "Title",
    "text": "Issues"
  },
  {
    "type": "NarrativeText",
    "text": "Pull Requests"
  },
  {
    "type": "UncategorizedText",
    "text": "0"
  },
  {
    "type": "UncategorizedText",
    "text": "0"
  },
  {
    "type": "NarrativeText",
    "text": "Last publish"
  },
  {
    "type": "Title",
    "text": "14 days ago"
  },
  {
    "type": "NarrativeText",
    "text": "Collaborators"
  },
  {
    "type": "Image",
    "text": ""
  },
  {
    "type": "Title",
    "text": "Try on RunKit"
  },
  {
    "type": "Footer",
    "text": "Report malware"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "Title",
    "text": "hh"
  },
  {
    "type": "NarrativeText",
    "text": "11/12"
  },
  {
    "type": "Header",
    "text": "16/05/2024, 14:12"
  },
  {
    "type": "Image",
    "text": "©)"
  },
  {
    "type": "Title",
    "text": "Support"
  },
  {
    "type": "NarrativeText",
    "text": "Help"
  },
  {
    "type": "NarrativeText",
    "text": "Advisories"
  },
  {
    "type": "NarrativeText",
    "text": "Status"
  },
  {
    "type": "Title",
    "text": "Contact npm"
  },
  {
    "type": "Title",
    "text": "Company"
  },
  {
    "type": "Title",
    "text": "About"
  },
  {
    "type": "NarrativeText",
    "text": "Blog"
  },
  {
    "type": "NarrativeText",
    "text": "Press"
  },
  {
    "type": "Title",
    "text": "Terms & Policies"
  },
  {
    "type": "NarrativeText",
    "text": "Policies"
  },
  {
    "type": "NarrativeText",
    "text": "Terms of Use"
  },
  {
    "type": "NarrativeText",
    "text": "Code of Conduct"
  },
  {
    "type": "NarrativeText",
    "text": "Privacy"
  },
  {
    "type": "Title",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "NarrativeText",
    "text": "https://www.npmjs.com/package/node-calls-python"
  },
  {
    "type": "Header",
    "text": "node-calls-python - npm"
  },
  {
    "type": "Header",
    "text": "12/12"
  }
]
